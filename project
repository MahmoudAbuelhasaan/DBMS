#!/bin/bash

# global variable to store the current database name
current_db=""

main_menu() {
  clear
  echo "Main Menu:"
  echo "1. Create Database"
  echo "2. List Databases"
  echo "3. Connect To Database"
  echo "4. Drop Database"
  echo "5. Exit"
  read -p "Enter your choice: " choice
  case $choice in
    1) create_database;;
    2) list_databases;;
    3) connect_to_database;;
    4) drop_database;;
    5) exit;;
    *) echo "Invalid choice. Please try again."; main_menu;;
  esac
}

create_database() {
  read -p "Enter the name of the new database: " db_name
  # check if the database already exists
  if [ -d "$db_name" ]; then
    echo "Error: Database already exists."
    main_menu
  else
    mkdir $db_name
    echo "Database $db_name created successfully."
    main_menu
  fi
}

list_databases() {
  echo "List of databases:"
  ls -l | grep "^d" | awk '{print $9}'
  main_menu
}

connect_to_database() {
  read -p "Enter the name of the database to connect to: " db_name
  # check if the database exists
  if [ -d "$db_name" ]; then
    current_db=$db_name
    table_menu
  else
    echo "Error: Database not found."
    main_menu
  fi
}

drop_database() {
  read -p "Enter the name of the database to drop: " db_name
  # check if the database exists
  if [ -d "$db_name" ]; then
    rm -r $db_name
    echo "Database $db_name dropped successfully."
    main_menu
  else
    echo "Error: Database not found."
    main_menu
  fi
}


main_menu


# Mahmoud Ali Ahmed 
# selecting table menu when conect to data base 
function tablesMenu {
  echo -e "\n+--------Tables Menu------------+"
  echo " 1. Show Existing Tables"
  echo " 2. Create New Table"
  echo " 3. Insert Into Table"
  echo " 4. Select From Table"
  echo " 5. Update Table"
  echo " 6. Delete From Table"
  echo " 7. Drop Table"
  echo " 8. Back To Main Menu"
  echo " 9. Exit"
  echo "------------------------------------------------------------------------------------"
  echo -e "Enter the number of your Choice: \c"
  read ch
  case $ch in
    1)  ls .; tablesMenu ;;
    2)  createTable ;;
    3)  insert;;
    4)  clear; selectMenu ;;
    5)  updateTable;;
    6)  deleteFromTable;;
    7)  dropTable;;
    8) clear; cd ../.. 2>>./.error.log; mainMenu ;;
    9) exit ;;
    *) echo " Wrong Choice " ; tablesMenu;
  esac

}


# Mahmoud Ali Ahmed
# creating table function
function createTable {
  echo -e "Table Name: \c"
  read tableName
  #get sure that table is created or not 
  if [[ -f $tableName ]]; then
    echo "table already existed ,choose another name"
    tablesMenu
  fi
  #start creating table
  echo -e "Number of Columns: \c"
  read colsNum
  counter=1
  sep="|"
  rSep="\n"
  pKey=""
  metaData="Field"$sep"Type"$sep"key"
  #loop to get the colunm mames and data type
  while [ $counter -le $colsNum ]
  do
    echo -e "Name of Column No.$counter: \c"
    read colName

    echo -e "Type of Column $colName: "
    select var in "1.int" "2.str"
    do
      case $var in
        1 ) colType="int";break;;
        2 ) colType="str";break;;
        * ) echo "Wrong Choice" ;;
      esac
    done
    # macke primary key
    if [[ $pKey == "" ]]; then
      echo -e "Make PrimaryKey ? "
      select var in "yes" "no"
      do
        case $var in
          yes ) pKey="PK";
          metaData+=$rSep$colName$sep$colType$sep$pKey;
          break;;
          # case you dont need PK
          no )
          metaData+=$rSep$colName$sep$colType$sep""
          break;;
          * ) echo "Wrong Choice" ;;
        esac
      done
    else
      metaData+=$rSep$colName$sep$colType$sep""
    fi
    if [[ $counter == $colsNum ]]; then
      temp=$temp$colName
    else
      temp=$temp$colName$sep
    fi
    ((counter++))
  done

  # creating table with two files 
  touch .$tableName
  echo -e $metaData  >> .$tableName
  touch $tableName
  echo -e $temp >> $tableName
  if [[ $? == 0 ]]
  then
    echo "Table Created Successfully"
    tablesMenu
  else
    echo "Error Creating Table $tableName"
    tablesMenu
  fi
}

# mahmoud ali ahmed
# drop table function
function dropTable {
  echo -e "Enter Table Name: \c"
  read tName
  rm  $tName .$tName 2>>./.error.log
  if [[ $? == 0 ]]
  then
    echo "Table Dropped Successfully"
  else
    echo "Error Dropping Table $tName"
  fi
  tablesMenu
}

# mahmoud ali ahmed
# insert in table function
function insert {
  # make ture that table is existed
  echo -e "Table Name: \c"
  read tableName
  if ! [[ -f $tableName ]]; then
    echo "Table $tableName isn't existed ,choose another Table"
    tablesMenu
  fi
  colsNum=`awk 'END{print NR}' .$tableName`
  sep="|"
  rSep="\n"
  for (( i = 2; i <= $colsNum; i++ )); do
    colName=$( awk 'BEGIN{FS="|"}{ if(NR=='$i') print $1}' .$tableName)
    colType=$( awk 'BEGIN{FS="|"}{if(NR=='$i') print $2}' .$tableName)
    colKey=$( awk 'BEGIN{FS="|"}{if(NR=='$i') print $3}' .$tableName)
    echo -e "$colName ($colType) = \c"
    read data

    # Validate Input
    if [[ $colType == "int" ]]; then
      while ! [[ $data =~ ^[0-9]*$ ]]; do
        echo -e "invalid DataType !!"
        echo -e "$colName ($colType) = \c"
        read data
      done
    fi

    if [[ $colKey == "PK" ]]; then
      while [[ true ]]; do
        if [[ $data =~ ^[`awk 'BEGIN{FS="|" ; ORS=" "}{if(NR != 1)print $(('$i'-1))}' $tableName`]$ ]]; then
          echo -e "invalid input for Primary Key !!"
        else
          break;
        fi
        echo -e "$colName ($colType) = \c"
        read data
      done
    fi

    #Set row
    if [[ $i == $colsNum ]]; then
      row=$row$data$rSep
    else
      row=$row$data$sep
    fi
  done
  echo -e $row"\c" >> $tableName
  if [[ $? == 0 ]]
  then
    echo "Data Inserted Successfully"
  else
    echo "Error Inserting Data into Table $tableName"
  fi
  row=""
  tablesMenu
}